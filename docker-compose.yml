version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: colink-commerce-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: colink_commerce
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - colink-network

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: colink-commerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - colink-network

  # API Service (Express)
  api:
    build:
      context: .
      dockerfile: ./infra/api.Dockerfile
    container_name: colink-commerce-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:password@db:5432/colink_commerce
      REDIS_URL: redis://redis:6379
      API_PORT: 4000
      LOG_LEVEL: debug
      FEATURE_USE_MOCK_CONNECTORS: "true"
      # Add other environment variables from .env.example
    ports:
      - "4000:4000"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ./prisma:/app/prisma
      - ./node_modules:/app/node_modules
      - api_node_modules:/app/apps/api/node_modules
    command: pnpm --filter @colink-commerce/api dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - colink-network

  # Web Service (Next.js)
  web:
    build:
      context: .
      dockerfile: ./infra/web.Dockerfile
    container_name: colink-commerce-web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_APP_NAME: CoLink Commerce
      NEXT_PUBLIC_BASE_URL: http://localhost:3000
      NEXT_PUBLIC_ENABLE_ANALYTICS: "false"
      NEXT_PUBLIC_USE_MOCK_DATA: "true"
      # Add other environment variables from .env.example
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - ./node_modules:/app/node_modules
      - web_node_modules:/app/apps/web/node_modules
    command: pnpm --filter @colink-commerce/web dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - colink-network

  # Prisma Studio (optional)
  prisma-studio:
    build:
      context: .
      dockerfile: ./infra/api.Dockerfile
    container_name: colink-commerce-prisma-studio
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:password@db:5432/colink_commerce
    ports:
      - "5555:5555"
    volumes:
      - ./prisma:/app/prisma
      - ./node_modules:/app/node_modules
    command: npx prisma studio --port 5555 --host 0.0.0.0
    networks:
      - colink-network

  # Bull Board for queue monitoring
  bull-board:
    build:
      context: .
      dockerfile: ./infra/api.Dockerfile
    container_name: colink-commerce-bull-board
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379
      BULL_BOARD_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ./node_modules:/app/node_modules
    command: node ./apps/api/scripts/bull-board-standalone.js
    networks:
      - colink-network

  # Mock services for development
  mock-services:
    build:
      context: .
      dockerfile: ./infra/api.Dockerfile
    container_name: colink-commerce-mock-services
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    environment:
      NODE_ENV: development
      API_URL: http://api:4000
    volumes:
      - ./scripts:/app/scripts
      - ./node_modules:/app/node_modules
    command: node ./scripts/mock-services/server.js
    ports:
      - "4001:4001"
    networks:
      - colink-network

volumes:
  postgres_data:
    name: colink-commerce-postgres-data
  redis_data:
    name: colink-commerce-redis-data
  api_node_modules:
    name: colink-commerce-api-node-modules
  web_node_modules:
    name: colink-commerce-web-node-modules

networks:
  colink-network:
    name: colink-commerce-network
    driver: bridge
